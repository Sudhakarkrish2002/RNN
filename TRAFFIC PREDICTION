import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
data = pd.read_csv(r"E:\summa\rnn\Traffic.csv")
print("Columns in the dataset:", data.columns)
column_name = 'Traffic Situation'
if column_name not in data.columns:
    raise KeyError(f"The column name '{column_name}' does not exist in the dataset. Available columns: {data.columns}")
# Encode categorical data to numeric values
label_encoder = LabelEncoder()
data[column_name] = label_encoder.fit_transform(data[column_name])
# Prepare the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data[column_name].values.reshape(-1, 1))
def create_dataset(dataset, time_step=1):
    dataX, dataY = [], []
    for i in range(len(dataset) - time_step - 1):
        a = dataset[i:(i + time_step), 0]
        dataX.append(a)
        dataY.append(dataset[i + time_step, 0])
    return np.array(dataX), np.array(dataY)
time_step = 10
X, y = create_dataset(scaled_data, time_step)
X = X.reshape(X.shape[0], X.shape[1], 1)
train_size = int(len(X) * 0.8)
test_size = len(X) - train_size
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]
model = Sequential()
model.add(SimpleRNN(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(SimpleRNN(50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test), verbose=1)
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)
y_train_actual = scaler.inverse_transform([y_train])
y_test_actual = scaler.inverse_transform([y_test])
plt.figure(figsize=(14, 5))
plt.plot(np.arange(len(y_train)), y_train_actual.flatten(), label='Train Actual')
plt.plot(np.arange(len(y_train), len(y_train) + len(y_test)), y_test_actual.flatten(), label='Test Actual')
plt.plot(np.arange(len(y_train)), train_predict.flatten(), label='Train Predict')
plt.plot(np.arange(len(y_train), len(y_train) + len(y_test)), test_predict.flatten(), label='Test Predict')
plt.legend()
plt.show()




